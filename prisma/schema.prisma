generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChargePoint {
  id                   String                     @id
  name                 String?
  vendor               String
  model                String
  serialNumber         String?
  firmwareVersion      String?
  iccid                String?
  imsi                 String?
  meterType            String?
  meterSerialNumber    String?
  isOnline             Boolean                    @default(false)
  lastSeen             DateTime?
  heartbeatInterval    Int                        @default(300)
  bootNotificationSent Boolean                    @default(false)
  location             String?
  description          String?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  alarms               Alarm[]
  configurations       ChargePointConfiguration[]
  chargingData         ChargingData[]
  connectors           Connector[]
  transactions         Transaction[]

  @@map("charge_points")
}

model Connector {
  id               Int             @id @default(autoincrement())
  chargePointId    String
  connectorId      Int
  type             ConnectorType   @default(TYPE2)
  status           ConnectorStatus @default(AVAILABLE)
  errorCode        String?
  info             String?
  vendorId         String?
  vendorErrorCode  String?
  maxPower         Float?
  inputVoltage     Float           @default(0)
  inputCurrent     Float           @default(0)
  outputContactors Boolean         @default(false)
  outputVoltage    Float           @default(0)
  outputEnergy     Float           @default(0)
  chargingEnergy   Float           @default(0)
  gunTemperature   Float           @default(25)
  stateOfCharge    Float           @default(0)
  chargeTime       Int             @default(0)
  remainingTime    Int             @default(0)
  demandCurrent    Float           @default(0)
  connected        Boolean         @default(false)
  lastUpdated      DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  chargingData     ChargingData[]
  chargePoint      ChargePoint     @relation(fields: [chargePointId], references: [id], onDelete: Cascade)
  transactions     Transaction[]

  @@unique([chargePointId, connectorId])
  @@map("connectors")
}

model Transaction {
  id             Int          @id @default(autoincrement())
  transactionId  Int          @unique
  chargePointId  String
  connectorId    Int
  idTag          String
  meterStart     Float
  meterStop      Float?
  startTimestamp DateTime
  stopTimestamp  DateTime?
  stopReason     StopReason?
  reservationId  Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  meterValues    MeterValue[]
  connector      Connector    @relation(fields: [chargePointId, connectorId], references: [chargePointId, connectorId])
  chargePoint    ChargePoint  @relation(fields: [chargePointId], references: [id])

  @@map("transactions")
}

model ChargingData {
  id               String          @id @default(cuid())
  chargePointId    String
  connectorId      Int
  transactionId    Int?
  gunType          ConnectorType
  status           ConnectorStatus
  inputVoltage     Float
  inputCurrent     Float
  outputContactors Boolean
  outputVoltage    Float
  outputEnergy     Float
  chargingEnergy   Float
  alarm            String?
  stopReason       StopReason?
  connected        Boolean
  gunTemperature   Float
  stateOfCharge    Float
  chargeTime       Int
  remainingTime    Int
  demandCurrent    Float
  timestamp        DateTime        @default(now())
  connector        Connector       @relation(fields: [chargePointId, connectorId], references: [chargePointId, connectorId])
  chargePoint      ChargePoint     @relation(fields: [chargePointId], references: [id])

  @@index([chargePointId, timestamp])
  @@index([connectorId, timestamp])
  @@map("charging_data")
}

model MeterValue {
  id            String         @id @default(cuid())
  transactionId Int?
  connectorId   Int
  chargePointId String
  timestamp     DateTime
  createdAt     DateTime       @default(now())
  Transaction   Transaction?   @relation(fields: [transactionId], references: [transactionId])
  sampledValues SampledValue[]

  @@map("meter_values")
}

model SampledValue {
  id           String     @id @default(cuid())
  meterValueId String
  value        String
  context      String?
  format       String?
  measurand    String?
  phase        String?
  location     String?
  unit         String?
  meterValue   MeterValue @relation(fields: [meterValueId], references: [id], onDelete: Cascade)

  @@map("sampled_values")
}

model User {
  id                String              @id @default(cuid())
  username          String              @unique
  email             String              @unique
  password          String
  role              UserRole            @default(VIEWER)
  apiKey            String?             @unique
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  chargePointAccess ChargePointAccess[]
  permissions       Permission[]

  @@map("users")
}

model Permission {
  id       String @id @default(cuid())
  userId   String
  resource String
  action   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resource, action])
  @@map("permissions")
}

model ChargePointAccess {
  id            String      @id @default(cuid())
  userId        String
  chargePointId String
  accessLevel   AccessLevel @default(READ)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chargePointId])
  @@map("charge_point_access")
}

model ChargePointConfiguration {
  id            String      @id @default(cuid())
  chargePointId String
  key           String
  value         String
  readonly      Boolean     @default(false)
  chargePoint   ChargePoint @relation(fields: [chargePointId], references: [id], onDelete: Cascade)

  @@unique([chargePointId, key])
  @@map("charge_point_configurations")
}

model Alarm {
  id            String        @id @default(cuid())
  chargePointId String
  connectorId   Int?
  alarmType     String
  severity      AlarmSeverity
  message       String
  resolved      Boolean       @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  chargePoint   ChargePoint   @relation(fields: [chargePointId], references: [id])

  @@map("alarms")
}

model IdTag {
  id          String      @id @default(cuid())
  idTag       String      @unique
  parentIdTag String?
  status      IdTagStatus @default(ACCEPTED)
  expiryDate  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("id_tags")
}

enum ConnectorType {
  CCS
  CHAdeMO
  TYPE2
  TYPE1
  TESLA
  GBT

  @@map("connector_type")
}

enum ConnectorStatus {
  AVAILABLE
  PREPARING
  CHARGING
  SUSPENDED_EVSE
  SUSPENDED_EV
  FINISHING
  RESERVED
  UNAVAILABLE
  FAULTED

  @@map("connector_status")
}

enum StopReason {
  EMERGENCY_STOP
  EV_DISCONNECTED
  HARD_RESET
  LOCAL
  OTHER
  POWER_LOSS
  REBOOT
  REMOTE
  SOFT_RESET
  UNLOCK_COMMAND
  DE_AUTHORIZED
  ENERGY_LIMIT_REACHED
  GROUND_FAULT
  IMMEDIATE_RESET
  LOCAL_OUT_OF_CREDIT
  MASTER_PASS
  OVERCURRENT_FAULT
  POWER_QUALITY
  SOC_LIMIT_REACHED
  STOPPED_BY_EV
  TIME_LIMIT_REACHED
  TIMEOUT

  @@map("stop_reason")
}

enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
  THIRD_PARTY

  @@map("user_role")
}

enum AccessLevel {
  READ
  WRITE
  CONTROL
  ADMIN

  @@map("access_level")
}

enum AlarmSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL

  @@map("alarm_severity")
}

enum IdTagStatus {
  ACCEPTED
  BLOCKED
  EXPIRED
  INVALID
  CONCURRENT_TX

  @@map("id_tag_status")
}
